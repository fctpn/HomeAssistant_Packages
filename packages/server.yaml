homeassistant:
  # Two factor authentication
  auth_mfa_modules:
    - type: notify
      message: 'Codul de acces este: {}'
    - type: totp
      name: Authenticator APP

http:
  # Setup NGINX
  use_x_forwarded_for: true
  trusted_proxies:
    - 172.30.33.0/24

downloader:
  download_dir: packages
  
recorder:
  # Set recorder to use MariaDB
  db_url: !secret recorder_db_url
  purge_keep_days: !secret recorder_keep_days
  exclude:
    entities:
      - automation.healthchecks

rest_command:
  # monitor server with healthchecks.io
  healthchecks:
    url: !secret healthchecks

#Telegram bot
telegram_bot:
  - platform: polling
    api_key: !secret telegram_api_key
    allowed_chat_ids: !secret telegram_allowed_chat_ids

# Telegram notify
notify:
  - platform: telegram
    name: tiot_telegram
    chat_id: !secret telegram_notify_chat_id

script:
  # Script to update this package from GitHub
  update_packages:
    alias: Update Packages
    sequence:
      - service: downloader.download_file
        data:
          overwrite: true
          url: >-
            https://raw.githubusercontent.com/topaniot/HomeAssistant_Packages/main/packages/server.yaml

sensor:
    # RPI sensors
  - platform: systemmonitor
    resources:
      - type: processor_use
      - type: swap_use_percent
      - type: processor_temperature
      - type: load_15m
      - type: memory_use_percent
      - type: disk_use_percent
        arg: /
      - type: disk_use
        arg: /
  - platform: uptime
    name: Time Online
    # MariaDB database size
  - platform: sql
    db_url: !secret recorder_db_url
    queries:
      - name: "DataBase size"
        query: !secret recorder_db_query 
        column: "value"
        unit_of_measurement: MB   

automation:
    # Notify on server start using defined service
  - id: 'server_start'
    alias: Server Start
    description: ''
    trigger:
    - platform: homeassistant
      event: start
    condition: []
    action:
    - service: !secret notify_service
      data:
        message: 🦾 Serverul a pornit!
    mode: single
    
    # Ping healthchecks.io every minute
  - id: 'healthchecks_update'
    alias: HealthChecks
    description: ''
    trigger:
      - platform: time_pattern
        minutes: /1
    condition: []
    action:
      - service: rest_command.healthchecks
    mode: single

    # Notify when CPU load 15m is above 4 and when goes back below 3
  - id: 'cpu_load_15m'
    alias: CPU Load
    description: ''
    trigger:
      - platform: numeric_state
        entity_id: sensor.load_15m
        above: '4'
    condition: []
    action:
      - service: !secret notify_service
        data:
          message: "🟡 CPU Load (15m) = {{ states('sensor.load_15m') }}"
      - wait_template: "{{ states( 'sensor.load_15m' ) | float < 3 }}"
      - service: !secret notify_service
        data:
          message: "🟢 CPU Load (15m) = {{ states('sensor.load_15m') }}"
    mode: single

    # Notify when CPU Temperature is high
  - id: 'cpu_temp'
    alias: CPU Temperature
    description: ''
    trigger:
      - platform: numeric_state
        entity_id: sensor.processor_temperature
        above: '70'
    condition: []
    action:
      - service: !secret notify_service
        data:
          message: "🟡 CPU Temp. = {{ states('sensor.processor_temperature') }}°C"
      - wait_template: "{{ states( 'sensor.processor_temperature' ) | float < 60 }}"
      - service: !secret notify_service
        data:
          message: "🟢 CPU Temp. = {{ states('sensor.processor_temperature') }}°C"
    mode: single

    # Notify when RAM is almost full
  - id: 'ram_usage'
    alias: RAM Usage
    description: ''
    trigger:
      - platform: numeric_state
        entity_id: sensor.memory_use_percent
        above: '80'
    condition: []
    action:
      - service: !secret notify_service
        data:
          message: "🟡 RAM = {{ states('sensor.memory_use_percent') }}%"
      - wait_template: "{{ states( 'sensor.memory_use_percent' ) | float < 70 }}"
      - service: !secret notify_service
        data:
          message: "🟢 RAM = {{ states('sensor.memory_use_percent') }}%"
    mode: single

    # Notify when storage is almost full
  - id: 'disk_usage'
    alias: Disk Usage
    description: ''
    trigger:
      - platform: numeric_state
        entity_id: sensor.disk_use_percent
        above: '70'
    condition: []
    action:
      - service: !secret notify_service
        data:
          message: "🟡 Disk = {{ states('sensor.disk_use_percent') }}%"
      - wait_template: "{{ states( 'sensor.disk_use_percent' ) | float < 60 }}"
      - service: !secret notify_service
        data:
          message: "🟢 Disk = {{ states('sensor.disk_use_percent') }}%"
    mode: single
# Package - Updates Available
# List all available updates of entities with device class update
#
# You must set in secrets.yaml
# notify_service: "notify.notify"
# delay_notify_updates: "24:00:00"
#
# If you want to exlcude entities create group ignored_entities in groups.yaml
# Example:
# ignored_entities:
#   name: "Ignored Entities"
#   entities:
#     - sun.sun

script:
  # Script to update this package from GitHub
  update_packages:
    sequence:
      - service: downloader.download_file
        data:
          overwrite: true
          url: >-
            https://raw.githubusercontent.com/topaniot/HomeAssistant_Packages/main/packages/updates_available.yaml

group:
  ignored_entities:
    entities:
      - binary_sensor.updater

sensor:
  - platform: version

template:
  - trigger:
      - platform: time_pattern
        minutes: "/1"
    sensor:
      - name: "Updates Available"
        icon: "hass:update"
        state: >
              {{ states
                |selectattr('attributes.device_class','eq','update')
                |rejectattr('state', 'in', ['off','unknown','unavailable','none'])
                |rejectattr('entity_id','in',state_attr('group.ignored_entities','entity_id'))
                |list|count 
              }}
        attributes:
            names: >
              {{ states
                |selectattr('attributes.device_class','eq','update')
                |rejectattr('state', 'in', ['off','unknown','unavailable','none'])
                |rejectattr('entity_id','in',state_attr('group.ignored_entities','entity_id'))
                |map(attribute='name')|join (", ")
              }}
  - sensor:
      - name: "Available Updates Alert"
        icon: "mdi:alert-circle"
        state: >
          {% if is_state('sensor.updates_available', 'unknown') %}
            unknown
          {% elif states('sensor.updates_available')|int(default=0) > 0 %}
            on
          {% else %}
            off
          {% endif %}
          
  - trigger:
      - platform: time_pattern
        minutes: "/1"
    sensor:
      - name: "HA Newest Version"
        icon: "hass:package"
        state: >
          {% if state_attr('binary_sensor.updater', 'newest_version') != states('sensor.current_version') %}
            {{ state_attr('binary_sensor.updater', 'newest_version') }}
          {% else %}
            Up-to-date
          {% endif %}

automation:
  # Notify when updates are available
  - id: "updates_available_detected"
    alias: Updates Available Detected
    description: ''
    mode: restart
    trigger:
      - platform: state
        entity_id: sensor.updates_available
        for: !secret delay_notify_updates
    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: sensor.updates_available
                state: unknown
            sequence: []
          - conditions:
              - condition: numeric_state
                entity_id: sensor.updates_available
                above: '0'
                below: '2'
            sequence:
              - service: !secret notify_service
                data:
                  message: |
                    ðŸŸ¡ Este o actualizare disponibilÄƒ:
                    â€“ {{ state_attr('sensor.updates_available','names').split(',') | join('
                    â€“') }}
          - conditions:
              - condition: numeric_state
                entity_id: sensor.updates_available
                above: '1'
            sequence:
              - service: !secret notify_service
                data:
                  message: |
                    ðŸŸ¡ Sunt {{ states('sensor.updates_available')|int }} actualizÄƒri disponibile:
                    â€“ {{ state_attr('sensor.updates_available','names').split(',') | join('
                    â€“') }}
        default: []

  # Notify when there are no updates available
  - id: "updates_available_cleared"
    alias: Updates Available Cleared
    description: ''
    mode: restart
    trigger:
      - platform: state
        entity_id: sensor.available_updates_alert
        for: "00:00:05"
    condition: []
    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: sensor.available_updates_alert
                state: unknown
            sequence: []
          - conditions:
              - condition: state
                entity_id: sensor.available_updates_alert
                state: 'off'
            sequence:
              - service: !secret notify_service
                data:
                  message: "ðŸŽ‰ Dispozitivele sunt actualizate!"
        default: []

  # Notify when Home Assistant update is available
  - id: "update_available_ha"     
    alias: Update Available HA
    description: ''
    trigger:
      - platform: state
        entity_id: sensor.ha_newest_version
        for: "00:00:05"
    condition: []
    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: sensor.unavailable_entities
                state: unknown
            sequence: []
          - conditions:
              - condition: state
                entity_id: sensor.ha_newest_version
                state: 'Up-to-date'
            sequence:
              - service: !secret notify_service
                data:
                  message: "ðŸŽ‰ Home Assistant este actualizat!"
          - conditions:
              - condition: not
                conditions:
                  - condition: state
                    entity_id: sensor.ha_newest_version
                    state: 'Up-to-date'
            sequence:
              - service: !secret notify_service
                data:
                  message: |
                    ðŸŽ‰ HA {{ state_attr('binary_sensor.updater', 'newest_version') }} disponibil!
                    Actual {{ states('sensor.current_version') }}
                    
                    Note versiune:
                    {{ state_attr('binary_sensor.updater', 'release_notes') }}
        default: []
    mode: restart

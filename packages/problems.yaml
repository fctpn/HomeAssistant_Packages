# Package - Problems found
# List all available problems entities with device class problem
#
# You must set in secrets.yaml
# notify_service_problems: "notify.notify"
# delay_notify_updates: "24:00:00"
#
# If you want to exlcude entities create group ignored_updates in groups.yaml
#
# Example:
# ignored_updates:
#   entities:
#     - binary_sensor.updater

script:
  # Script to update this package from GitHub
  update_packages:
    sequence:
      - service: downloader.download_file
        data:
          overwrite: true
          url: >-
            https://raw.githubusercontent.com/topaniot/HomeAssistant_Packages/main/packages/problems.yaml

group:
  ignored_problems:
    name: Ignored Updates
    entities: []

template:
  - trigger:
      - platform: time_pattern
        minutes: "/1"
    sensor:
      - name: "Problems Detected"
        icon: "hass:alert-outline"
        state: >
              {{ states
                |selectattr('attributes.device_class','eq','problem')
                |rejectattr('state', 'in', ['off','unknown','unavailable','none'])
                |rejectattr('entity_id','in',state_attr('group.ignored_problems','entity_id'))
                |list|count 
              }}
        attributes:
            names: >
              {{ states
                |selectattr('attributes.device_class','eq','problem')
                |rejectattr('state', 'in', ['off','unknown','unavailable','none'])
                |rejectattr('entity_id','in',state_attr('group.ignored_problems','entity_id'))
                |map(attribute='name')|join (", ")
              }}
          
input_boolean:
  problems_detected_alert:
    name: Problems Detected Alert
    icon: "mdi:alert-circle"

automation:
  # Notify when updates are available
  - id: "problems_detected"
    alias: Problems Detected
    mode: restart
    trigger:
      - platform: state
        entity_id: sensor.problems_detected
    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: sensor.problems_detected
                state: unknown
            sequence: []
          - conditions:
              - condition: numeric_state
                entity_id: sensor.problems_detected
                above: '0'
                below: '2'
            sequence:
              - delay: !secret delay_notify_problems
              - service: input_boolean.turn_on
                target:
                  entity_id: input_boolean.problems_detected_alert
              - service: !secret notify_service_problems
                data:
                  message: |
                    ‚ö†Ô∏è Este o problema la:
                    ‚Äì {{ state_attr('sensor.problems_detected','names').split(',') | join('
                    ‚Äì') }}
          - conditions:
              - condition: numeric_state
                entity_id: sensor.problems_detected
                above: '1'
            sequence:
              - delay: !secret delay_notify_problems
              - service: input_boolean.turn_on
                target:
                  entity_id: input_boolean.problems_detected_alert
              - service: !secret notify_service_problems
                data:
                  message: |
                    üü° Sunt {{ states('sensor.problems_detected')|int }} probleme:
                    ‚Äì {{ state_attr('sensor.problems_detected','names').split(',') | join('
                    ‚Äì') }}
          - conditions:
              - condition: numeric_state
                entity_id: sensor.problems_detected
                below: '1'
              - condition: state
                entity_id: input_boolean.problems_detected_alert
                state: 'on'
            sequence:
              - service: !secret notify_service_problems
                data:
                  message: "üëå Problemele au disparut!"
              - service: input_boolean.turn_off
                target:
                  entity_id: input_boolean.problems_detected_alert
        default: []